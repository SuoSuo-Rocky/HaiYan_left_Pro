package com.example.modeldigtub;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.ToggleButton;

public class MainActivity extends Activity {
	
	private EditText ip_et;
	private EditText port_et;
	
	private TextView info_tv;
	private ToggleButton connect_tb;
	private Context context;
	private Button one;
	private Button two;
	private Button three;
	private Button four;
	
	private connectTask connect;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		bindView();
		initData();
		initEvent();
	}

	
	public  Socket getSocket(String ip,int port){
		Socket socket=new Socket();
		InetSocketAddress address=new InetSocketAddress(ip,port);
		try {
			socket.connect(address,3000);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(!socket.isConnected()){
			info_tv.setText("连接失败");
			return null;
		}else{
			return socket;
		}
	}

	private void initEvent() {
		connect_tb.setOnCheckedChangeListener(new OnCheckedChangeListener() {
			
			@Override
			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
				if(isChecked){
					String ip=ip_et.getText().toString().trim();
					String port=port_et.getText().toString().trim();
					if(checkIpPort(ip, port)){
						Constant.IP=ip;
						Constant.port=Integer.parseInt(port);
					}else{
						info_tv.setText("ip和 port 输入不正确，请重新输入......");
					}
				  Constant.tubSocket=getSocket(Constant.IP,Constant.port);
				  if(Constant.tubSocket!=null){
					  info_tv.setText("连接成功......");
				  }
			
					
				}else{
//					if(connect!=null&&connect.getStatus()==AsyncTask.Status.RUNNING){
//						Constant.one=true;
//						try {
//							Thread.sleep(200);
//						} catch (InterruptedException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//							
//							connect.cancel(true);
//							connect.closeSocket();
//							
//							info_tv.setText("请点击连接.......");
//						}
//					}
				}
				
			}
		});

		
		
		
		one.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(connect!=null){
					if(Constant.one==true){
						Constant.one=false;
					}
					connect.execute(Constant.ONE_CMD);
					
				}
				
				
			}
		});
		
		
two.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(connect!=null){
					if(Constant.one==true){
						Constant.one=false;
					}
					connect.execute(Constant.TWO_CMD);
					
				}
				
				
			}
		});

three.setOnClickListener(new OnClickListener() {
	
	@Override
	public void onClick(View v) {
		if(connect!=null){
			if(Constant.one==true){
				Constant.one=false;
			}
			connect.execute(Constant.THREE_CMD);
			
		}
		
		
	}
});

four.setOnClickListener(new OnClickListener() {
	
	@Override
	public void onClick(View v) {
		if(connect!=null){
			if(Constant.one==true){
				Constant.one=false;
			}
			connect.execute(Constant.FOUR_CMD);
			
		}
		
		
	}
});
		
	}


	private void initData() {
		info_tv.setText("请点击连接......");
		ip_et.setText(Constant.IP);
		port_et.setText(String.valueOf(Constant.port));
		context=this;
		
	}


	private void bindView() {
		ip_et=(EditText) findViewById(R.id.ip_et);
		port_et=(EditText) findViewById(R.id.port_et);
		info_tv=(TextView) findViewById(R.id.info_et);

		connect_tb=(ToggleButton) findViewById(R.id.connect_tb);
		one=(Button) findViewById(R.id.one);
		two=(Button) findViewById(R.id.two);
		three=(Button) findViewById(R.id.three);
		four=(Button) findViewById(R.id.four);
		
	}
	
	/**
	 * IP地址可用端口号验证，可用端口号（1024-65536）
	 * 
	 * @param IP
	 * @param port
	 * @return
	 */
	private boolean checkIpPort(String IP, String port) {
		boolean isIpAddress = false;
		boolean isPort = false;

		if (IP == null || IP.length() < 7 || IP.length() > 15 || "".equals(IP) || port == null || port.length() < 4
				|| port.length() > 5) {
			return false;
		}
		// 判断IP格式和范围
		String rexp = "([1-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3}";

		Pattern pat = Pattern.compile(rexp);

		Matcher mat = pat.matcher(IP);

		isIpAddress = mat.find();

		// 判断端口
		int portInt = Integer.parseInt(port);
		if (portInt > 1024 && portInt < 65536) {
			isPort = true;
		}

		return (isIpAddress && isPort);
	}
	


}
