package com.example.demoloadimageasynctask;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends Activity {
	/*
	 * 点击下载图片
	 * 使用异步任务
	 */
	private ImageView show;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		show=(ImageView) findViewById(R.id.image);
		show.setImageBitmap(bm);
		
	}
	
	public  void click(View view ) {
		new Thread(new Runnable() {
			
			@Override
			public void run() {
				
				
			}
		});
		

	}
	
	/*
	 * 三个泛型
	 * Params: 表示当前的异步任务
	 * Progress: 表示当前异步任务耗时操作时的进度类型
	 * Result: 表示 当前AsyncTask 耗时操作结果的数据类型
	 */
	class MyAsyncTask extends AsyncTask<String,Void,byte[]>{
		
		@Override
		protected void onPreExecute() {//表示在异步任务之前的准备工作，是回调方法。
        Log.v("shi",Thread.currentThread().getName()+"  ---------onpreExecute--------");			
		}
		/*
		 * 表示在onPreExecute() 方法执行结束之后立即执行。
		 * 该方法运行在工作线程中，主要执行耗时操作；
		 * 该方法的参数与类中泛型 的第一个参数一致
		 * 返回值一第三个参数相同。
		 */
		@Override
		protected byte[] doInBackground(String... params) {
			 Log.v("shi",Thread.currentThread().getName()+"  ---------doInBackground--------");	
			ByteArrayOutputStream  out=new ByteArrayOutputStream();
			byte[] images=null;
			try {
				URL url=new URL("params[0]");
				HttpsURLConnection conn= (HttpsURLConnection) url.openConnection();
				conn.setDoInput(true);
				conn.setRequestMethod("GET");
				conn.connect();
				int responseCode=conn.getResponseCode();
				if(responseCode==200){
					InputStream in=conn.getInputStream();
					byte[] date=new byte[1024];
					int temp=0;
					while ((temp=in.read(date))!=-1) {
					out.write(date,0,temp);
						
					}
				}
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			images=out.toByteArray();
			return images;
			
		}
		
		/*
		 * 当 doinBackgroung() 方法执行的结果返回给该方法。
		 */
		@Override
		protected void onPostExecute(byte[] result) {
	    Log.v("shi",Thread.currentThread().getName()+"  ---------onPostExecute--------");	
		if(result!=null&&result.length!=0){
			Bitmap bm=BitmapFactory.decodeByteArray(result,0,result.length);
			show.setImageBitmap(bm);
		}else{
			Toast.makeText(MainActivity.this,"图片下载失败 ！",Toast.LENGTH_SHORT).show();
		}
			super.onPostExecute(result);
			
		}
		
		
	}


}
























